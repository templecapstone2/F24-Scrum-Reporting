@model Capstone.ViewModels.AggregateViewModel
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@{
    Layout = "~/Views/Shared/_TempleScrumHeader.cshtml";
}


<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/professorStyling.css">

    <title>View Reports Page</title>

</head>
<body>

    <div class="content-title">
        <h1>View Reports Page</h1>
    </div>

    <div class="content-container">
        <nav class="sidenav">
            <a asp-controller="Professor" asp-action="Dashboard">Dashboard</a>
            <a asp-controller="Professor" asp-action="StudentManagement">Student Management</a>
            <a asp-controller="Professor" asp-action="AggregateView">Aggregate View</a>
            <a asp-controller="Professor" asp-action="ScrumManagement">Scrum Management</a>
            <a asp-controller="Professor" asp-action="TeamManagement">Team Management</a>
            <a asp-controller="Login" asp-action="Login">Logout</a>
        </nav>

        <div class="reports-container">
            <div class="filters">
                <div class="team-filter">
                    <label for="filterTeam">Team:</label>
                    <select id="filterTeam" class="form-control" onchange="filterResponses(); updateStudentDropdown()">
                        <option value="">All Teams</option>
                        @foreach (var team in Model.Teams)
                        {
                            <option value="@team.ID">@team.Name</option>
                        }
                    </select>
                </div>
                <div class="team-filter">
                    <label for="filterStudent">Student:</label>
                    <select id="filterStudent" class="form-control" onchange="filterResponses()">
                        <option value="">All Students</option>
                        @foreach (var student in Model.Students)
                        {
                            <option value="@student.ID">@($"{student.FirstName} {student.LastName}")</option>
                        }
                    </select>
                </div>
                <div class="team-filter">
                    <label for="filterDateFrom">From:</label>
                    <input type="date" id="filterDateFrom" name="fromDate"
                           max="@DateTime.Now.ToString("yyyy-MM-dd")"
                           onchange="filterResponses()" class="form-control" />
                </div>
                <div class="team-filter">
                    <label for="filterDateTo">To:</label>
                    <input type="date" id="filterDateTo" name="toDate"
                           max="@DateTime.Now.ToString("yyyy-MM-dd")"
                           onchange="filterResponses()" class="form-control" />
                </div>
            </div>






            <div class="report-cards">
                @foreach (var response in Model.Responses)
                {
                    User student = null;
                    Team team = null;
                    Scrum scrum = null;

                    foreach (var s in Model.Students)
                    {
                        if (s.ID == response.UserID)
                        {
                            student = s;
                            break;
                        }
                    }

                    foreach (var s in Model.Scrums)
                    {
                        if (s.ID == response.ScrumID)
                        {
                            scrum = s;
                        }
                    }

                    foreach (TeamUser teamUser in Model.TeamUsers)
                    {
                        if (teamUser.UserID == response.UserID)
                        {
                            foreach (var t in Model.Teams)
                            {
                                if (t.ID == teamUser.TeamID)
                                {
                                    team = t;
                                    break;
                                }
                            }
                            break;
                        }
                    }

                    <div class="report-card"
                         data-student-name="@($"{student.FirstName} {student.LastName}")"
                         data-team-name="@team.Name"
                         data-date-submitted="@response.DateSubmitted">

                        <div class="response-header">
                            <div style="text-align: left">
                                <div class="response-name">Student: <span style="font-weight: bold">@(student.FirstName + " " + student.LastName)</span></div> 
                                <div class="response-team">Team: <span style="font-weight: bold">@(team.Name)</span></div> 
                                <div class="response-scrum-id">Scrum: <span style="font-weight: bold">@scrum.Name</span></div> 
                                <div class="response-due-date">Due Date: <span style="font-weight: bold">@scrum.DateDue</span></div> 
                                <div class="response-date">Submitted: <span style="font-weight: bold">@response.DateSubmitted</span></div>
                            </div>
                        </div>
                        <div class="response-body">
                            <div class="response-question">
                                <label>Question 1:</label>
                                <div>@response.QuestionOne</div>
                            </div>
                            <div class="response-question">
                                <label>Question 2:</label>
                                <div>@response.QuestionTwo</div>
                            </div>
                            <div class="response-question">
                                <label>Question 3:</label>
                                <div>@response.QuestionThree</div>
                            </div>
                        </div>
                    </div>
                }
            </div>



        </div>


    </div>

    <script>
        const students = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Students));
        const teamUsers = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TeamUsers));

        function filterResponses() {
            const selectedTeam = document.getElementById('filterTeam').selectedOptions[0].textContent.trim();
            const selectedStudent = document.getElementById('filterStudent').selectedOptions[0].textContent.trim();
            const selectedDateFrom = document.getElementById('filterDateFrom').value ?
                new Date(document.getElementById('filterDateFrom').value) : null;
            const selectedDateTo = document.getElementById('filterDateTo').value ?
                new Date(document.getElementById('filterDateTo').value) : null;
            const responseCards = document.querySelectorAll('.response-card');

            responseCards.forEach(function (card) {
                const responseStudent = card.getAttribute('data-student-name').trim();
                const responseTeam = card.getAttribute('data-team-name').trim();
                const responseDateSubmitted = new Date(card.getAttribute('data-date-submitted').trim());

                const matchesTeam = (selectedTeam === "All Teams") || (responseTeam === selectedTeam);
                const matchesStudent = (selectedStudent === "All Students") || (responseStudent === selectedStudent);
                const matchesFromDate = !selectedDateFrom || selectedDateFrom <= responseDateSubmitted;
                const matchesToDate = !selectedDateTo || selectedDateTo >= responseDateSubmitted;

                if (matchesTeam && matchesStudent && matchesFromDate && matchesToDate) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        function updateStudentDropdown() {
            const selectedTeam = document.getElementById('filterTeam').value;
            const studentDropdown = document.getElementById('filterStudent');
            studentDropdown.innerHTML = '<option value="">All Students</option>';

            if (selectedTeam === "") {
                students.forEach(function (student) {
                    const option = document.createElement('option');
                    option.value = student.ID;
                    option.textContent = `${student.FirstName} ${student.LastName}`;
                    studentDropdown.appendChild(option);
                });
            }
            else {
                teamUsers.forEach(function (teamUser) {
                    if (teamUser.TeamID === parseInt(selectedTeam)) {
                        const student = students.find(s => s.ID === teamUser.UserID);
                        if (student) {
                            const option = document.createElement('option');
                            option.value = student.ID;
                            option.textContent = `${student.FirstName} ${student.LastName}`;
                            studentDropdown.appendChild(option);
                        }
                    }
                });
            }
        }
    </script>

</body>

