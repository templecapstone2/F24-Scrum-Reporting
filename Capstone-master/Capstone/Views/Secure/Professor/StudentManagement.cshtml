@model Capstone.ViewModels.StudentManagementModel

@{
    Layout = "~/Views/Shared/_TempleScrumHeader.cshtml";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/pages-professor.css">
    <title>Users Management Page</title>
</head>
<body>

    <div class="content-title">
        <h1>Student Management Page</h1>
    </div>

    <div class="content-container">
        <button class="hamburger-menu" onclick="toggleNav()" aria-label="Open navigation menu">☰</button>

        <nav class="sidenav" id="navLinks">
            <a asp-controller="Professor" asp-action="Dashboard">Dashboard</a>
            <a asp-controller="Professor" asp-action="StudentManagement">Student Management</a>
            <a asp-controller="Professor" asp-action="AggregateView">Aggregate View</a>
            <a asp-controller="Professor" asp-action="ScrumManagement">Scrum Management</a>
            <a asp-controller="Professor" asp-action="TeamManagement">Team Management</a>
            <a asp-controller="Login" asp-action="Login">Logout</a>
        </nav>

        <div class="students-container">
            <div class="filters">
                <div class="team-filter">
                    <label for="teamFilter">Teams:</label>
                    <select id="teamFilter" class="form-control" onchange="filterUsersByTeam()">
                        <option value="all">ALL</option>
                        <option value="">Unassigned</option>
                        @foreach (Team team in Model.Teams)
                        {
                            <option value="@team.ID">@team.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div id="usersList" class="users-container">
                @foreach (User user in Model.Students)
                {
                    if (user.UserType == "student")
                    {
                        <div class="user-row" data-user-id="@user.ID" data-current-team="@Model.TeamUsers.FirstOrDefault(tu => tu.UserID == user.ID)?.TeamID">
                            <form action="StudentManagement" method="post" onsubmit="return validateTeamSelection(this)">
                                <span class="user-name">@user.FirstName @user.LastName</span>
                                <select name="newTeamID" class="team-dropdown">
                                    <option value="">Unassigned</option>
                                    @foreach (Team team in Model.Teams)
                                    {
                                        var isSelected = Model.TeamUsers.Any(tu => tu.UserID == user.ID && tu.TeamID == team.ID);
                                        var option = $"<option value='{team.ID}' {(isSelected ? "selected" : "")}>{team.Name}</option>";
                                        @Html.Raw(option)
                                    }
                                </select>
                                <input type="hidden" name="userID" value="@user.ID" />
                                <button type="submit" class="change-team-btn">Change Team</button>
                            </form>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <script>
        function filterUsersByTeam() {
            var selectedTeam = document.getElementById("teamFilter").value;
            var userRows = document.querySelectorAll(".user-row");

            userRows.forEach(function (row) {
                var currentTeam = row.getAttribute("data-current-team");
                if (selectedTeam === "all" || selectedTeam === "" && !currentTeam || currentTeam === selectedTeam) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
        }

        function validateTeamSelection(form) {
            var teamDropdown = form.querySelector(".team-dropdown");
            if (teamDropdown.value === "") {
                return confirm("Are you sure you want to assign this student as 'Unassigned'?");
            }
            return true;
        }

        function toggleNav() {
            const navLinks = document.getElementById('navLinks');
            navLinks.classList.toggle('active');
        }
    </script>

</body>
